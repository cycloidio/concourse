#!/bin/bash

set -e -x -u

CONCOURSE=$PWD/linux-binary/concourse_linux_amd64
chmod +x $CONCOURSE

# start postgres and set up passwordless superuser
/etc/init.d/postgresql start
yes "" | su postgres -c "createuser -s -P $(whoami)"
createdb atc

function wait_for_proc_port() {
  name=$1
  pid=$2
  port=$3

  until nc -w1 127.0.0.1 $port </dev/null; do
    if ! kill -0 $pid; then
      echo "${name} exited; aborting"
      exit 1
    fi

    echo "waiting for ${name}..."
    sleep 1
  done
}

function permit_device_control() {
  local devices_mount_info=$(cat /proc/self/cgroup | grep devices)

  if [ -z "$devices_mount_info" ]; then
    # cgroups not set up; must not be in a container
    return
  fi

  local devices_subsytems=$(echo $devices_mount_info | cut -d: -f2)
  local devices_subdir=$(echo $devices_mount_info | cut -d: -f3)

  if [ "$devices_subdir" = "/" ]; then
    # we're in the root devices cgroup; must not be in a container
    return
  fi

  cgroup_dir=/tmp/devices-cgroup

  if [ ! -e ${cgroup_dir} ]; then
    # mount our container's devices subsystem somewhere
    mkdir ${cgroup_dir}
  fi

  if ! mountpoint -q ${cgroup_dir}; then
    if ! mount -t cgroup -o $devices_subsytems none ${cgroup_dir}; then
      return 1
    fi
  fi

  # permit our cgroup to do everything with all devices
  # ignore failure in case something has already done this; echo appears to
  # return EINVAL, possibly because devices this affects are already in use
  echo a > ${cgroup_dir}${devices_subdir}/devices.allow || true

  umount "$cgroup_dir"
}

function containers_gone_wild() {
  for i in $(seq 64 67); do
    mknod -m 0660 /scratch/loop$i b 7 $i
    ln -s /scratch/loop$i /dev/loop$i
  done
}

function salt_earth() {
  for i in $(seq 64 67); do
    losetup -d /dev/loop$i > /dev/null 2>&1 || true
  done
}

permit_device_control
containers_gone_wild
trap salt_earth EXIT

webpid=1
workerpid=1

if [ "$QUICKSTART" = "true" ]; then
  $CONCOURSE quickstart \
    --postgres-socket /var/run/postgresql \
    --log-level debug \
    --add-local-user 'test:$2a$10$GXdnc1kAKG2u1Ba5DOO1G.uPADrfqr/ifudwHG/pTSUnKj/QQfi8i' \
    --main-team-allow-all-users \
    --worker-work-dir /scratch/concourse \
    --worker-garden-network-pool 10.255.0.0/22 \
    &

  quickstartpid=$!

  wait_for_proc_port atc $quickstartpid 8080
  wait_for_proc_port tsa $quickstartpid 2222
  wait_for_proc_port garden $quickstartpid 7777
  wait_for_proc_port baggageclaim $quickstartpid 7788
else
  # set up keys
  mkdir /etc/concourse
  ssh-keygen -f /etc/concourse/tsa-host -N ''
  ssh-keygen -f /etc/concourse/worker -N ''
  ssh-keygen -f /etc/concourse/session-signing-key -N ''

  $CONCOURSE web \
    --postgres-socket /var/run/postgresql \
    --tsa-host-key /etc/concourse/tsa-host \
    --tsa-authorized-keys /etc/concourse/worker.pub \
    --session-signing-key /etc/concourse/session-signing-key \
    --log-level debug \
    --add-local-user 'test:$2a$10$GXdnc1kAKG2u1Ba5DOO1G.uPADrfqr/ifudwHG/pTSUnKj/QQfi8i' \
    --main-team-allow-all-users \
    &

  webpid=$!

  wait_for_proc_port atc $webpid 8080
  wait_for_proc_port tsa $webpid 2222

  $CONCOURSE worker \
    --work-dir /scratch/concourse \
    --tsa-worker-private-key /etc/concourse/worker \
    --tsa-public-key /etc/concourse/tsa-host.pub \
    --garden-network-pool 10.255.0.0/22 \
    > /tmp/worker.log \
    &

  workerpid=$!
  wait_for_proc_port garden $workerpid 7777
  wait_for_proc_port baggageclaim $workerpid 7788
fi


export ATC_URL=http://127.0.0.1:8080
export ATC_USERNAME=test
export ATC_PASSWORD=test

./concourse/ci/scripts/testflight "$@"
