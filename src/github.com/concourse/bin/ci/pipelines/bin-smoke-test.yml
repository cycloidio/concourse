---
templates:
  - &setup-tugboat
    task: setup-tugboat
    file: bin/ci/smoke-tests/setup-tugboat.yml
    params: &setup-tugboat-params
      ACCESS_TOKEN: {{digitalocean-access-token}}

      SSH_USER: {{digitalocean-ssh-user}}
      SSH_KEY: {{digitalocean-ssh-key}}

  - &create-droplet
    task: create-droplet
    file: bin/ci/smoke-tests/create-droplet.yml
    params: &create-droplet-params
      OS: ""
      USER_NAME: ""

  - &teardown-droplet
    task: teardown
    file: bin/ci/smoke-tests/teardown-droplet.yml
    params: &teardown-droplet-params
      OS: ""

  - &launch-ec2-instance
    task: launch-ec2-instance
    params: &launch-ec2-instance-params
      AWS_ACCESS_KEY_ID: {{bin-test-aws-access-key}}
      AWS_SECRET_ACCESS_KEY: {{bin-test-aws-secret-key}}
      IMAGE_ID: ""
      USER_NAME: ""

    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/bin-test-ec2-ci

      inputs:
      - name: cloudformation-template

      outputs:
      - name: instance
      - name: keys

      run:
        path: bash
        args:
        - -c
        - |
          set -e -x

          mkdir -p ~/.aws

          cat << EOF > ~/.aws/config
          [default]
          output = json
          region = us-east-1
          EOF

          UUID=$(cat /proc/sys/kernel/random/uuid)
          KEY_NAME="bin-test-${UUID}"
          STACK_NAME="bin-test-${IMAGE_ID}-${UUID}"

          aws ec2 wait image-exists --image-ids $IMAGE_ID

          set +x
          aws ec2 create-key-pair --key-name $KEY_NAME | jq ".KeyMaterial" | tr -d '"' > escaped_key
          # we're going to call this PEM formatted key `id_rsa` so we get some task reuse while still being lazy
          echo -e $(cat escaped_key) > keys/id_rsa
          rm -f escaped_key
          chmod 0400 keys/id_rsa
          set -x

          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-body "$(cat cloudformation-template/ci/cloudformation/smoke-test.json)" \
            --parameters ParameterKey=EC2KeyPairParameter,ParameterValue=${KEY_NAME} \
                         ParameterKey=ImageIDParameter,ParameterValue=${IMAGE_ID}

          while [ "$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq ".Stacks[0].StackStatus" | tr -d '"')" == "CREATE_IN_PROGRESS" ]; do
            echo "waiting for stack to be created..."
            sleep 10
          done

          ALLOCATION_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME | jq ".Stacks[0].Outputs[0].OutputValue" | tr -d '"')
          IP=$(aws ec2 describe-addresses --allocation-ids $ALLOCATION_ID | jq ".Addresses[0].PublicIp" | tr -d '"')
          echo $IP > instance/ip

          cat << EOF > instance/cleanup
          #!/usr/bin/env bash

          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION=us-east-1

          set -e -x

          STACK_NAME=$STACK_NAME
          KEY_NAME=$KEY_NAME

          function cleanup_account()
          {
            aws ec2 delete-key-pair --key-name $KEY_NAME
            aws cloudformation delete-stack --stack-name $STACK_NAME
          }

          cleanup_account
          EOF

          chmod +x instance/cleanup

          trap ./instance/cleanup ERR TERM INT

          until ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no $USER_NAME@$IP "exit 0"; do
            echo "waiting for ssh to become available..."
            sleep 1
          done

  - &teardown-ec2-instance
    task: teardown
    params: &teardown-droplet-params
      OS: ""

    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/bin-test-ec2-ci

      inputs:
      - name: instance

      run:
        path: bash
        args:
        - -c
        - |
          ./instance/cleanup

  - &install-postgres-xenial
    task: install-postgres
    file: bin/ci/smoke-tests/install-postgres-xenial.yml
    params: &install-postgres-xenial-params
      USER_NAME: ""

  - &install-postgres-fedora
    task: install-postgres
    params: &install-postgres-fedora-params
      OS: ""
      USER_NAME: ""

    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: ruby
          tag: '2.1'

      inputs:
      - name: keys
      - name: instance

      run:
        path: bash
        args:
        - -c
        - |
          cat <<EOC > install_postgres
          set -ex

          sudo dnf install -y postgresql-server postgresql
          sudo postgresql-setup --initdb --unit postgresql

          echo "local all all peer" | sudo tee /var/lib/pgsql/data/pg_hba.conf
          echo "host all all 127.0.0.1/32 trust" | sudo tee -a /var/lib/pgsql/data/pg_hba.conf

          sudo systemctl start postgresql

          sudo -Hiu postgres psql -U postgres postgres <<EOF
            CREATE USER $USER_NAME SUPERUSER PASSWORD '' ;
          EOF

          createdb atc
          EOC

          ip=$(cat instance/ip)

          scp -q -i keys/id_rsa -o StrictHostKeyChecking=no install_postgres $USER_NAME@${ip}:
          ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no $USER_NAME@${ip} "chmod +x install_postgres && ./install_postgres"

  - &fedora-dependencies
    task: fedora-dependencies
    params: &fedora-dependencies-params
      USER_NAME: ""
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: ruby
          tag: '2.1'

      inputs:
      - name: keys
      - name: instance

      run:
        path: bash
        args:
        - -c
        - |
          cat <<EOC > install_deps
          set -ex

          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

          echo "sudo %_install_langs all" | sudo tee /etc/rpm/macros.image-language-conf
          sudo dnf reinstall -y glibc-common
          sudo dnf upgrade -y glibc glibc-common

          sudo dnf install -y tcping wget psmisc
          EOC

          ip=$(cat instance/ip)

          scp -q -i keys/id_rsa -o StrictHostKeyChecking=no install_deps $USER_NAME@${ip}:
          ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no $USER_NAME@${ip} "chmod +x install_deps && ./install_deps"

  - &test-bin
    task: test-bin
    file: bin/ci/smoke-tests/smoke-test.yml
    params: &test-bin-params
      USER_NAME: ""

resources:
- name: bin
  type: git
  source:
    uri: https://github.com/concourse/bin.git

- name: bin-rc
  type: github-release
  source:
    user: concourse
    repository: bin
    access_token: {{bin-release-token}}

- name: cloudformation-template
  type: git
  source:
    uri: https://github.com/concourse/bin.git
    paths: [ci/cloudformation/smoke-test.json]

jobs:
- name: digitalocean-ubuntu-xenial
  serial: true
  plan:
  - get: bin

  - get: bin-rc
    params:
      globs:
      - concourse_linux_amd64

  - <<: *setup-tugboat
    params:
      <<: *setup-tugboat-params
      IMAGE: ubuntu-16-04-x64
      OS: ubuntu
      USER_NAME: root


  - <<: *create-droplet
    params:
      <<: *create-droplet-params
      OS: ubuntu
      USER_NAME: root

  - ensure:
      <<: *teardown-droplet
      params:
        <<: *teardown-droplet-params
        OS: ubuntu

    do:

    - <<: *install-postgres-xenial
      params:
        <<: *install-postgres-xenial-params
        USER_NAME: root

    - <<: *test-bin
      params:
        <<: *test-bin-params
        OS: ubuntu
        USER_NAME: root

- name: digitalocean-fedora-23
  serial: true
  plan:
  - get: bin

  - get: bin-rc
    params:
      globs:
      - concourse_linux_amd64

  - <<: *setup-tugboat
    params:
      <<: *setup-tugboat-params
      IMAGE: fedora-23-x64
      OS: fedora
      USER_NAME: root

  - <<: *create-droplet
    params:
      <<: *create-droplet-params
      OS: fedora
      USER_NAME: root

  - ensure:
      <<: *teardown-droplet
      params:
        <<: *teardown-droplet-params
        OS: fedora
        USER_NAME: root

    do:
    - <<: *fedora-dependencies
      params:
        <<: *fedora-dependencies-params
        USER_NAME: root

    - <<: *install-postgres-fedora
      params:
        <<: *install-postgres-fedora-params
        OS: fedora
        USER_NAME: root

    - <<: *test-bin
      params:
        <<: *test-bin-params
        OS: fedora
        USER_NAME: root

- name: ec2-ubuntu-xenial
  serial: true
  plan:
  - aggregate:
    - get: bin

    - get: bin-rc
      params:
        globs:
        - concourse_linux_amd64

    - get: cloudformation-template

  - <<: *launch-ec2-instance
    params:
      <<: *launch-ec2-instance-params
      USER_NAME: ubuntu
      IMAGE_ID: ami-840910ee

  - ensure:
      <<: *teardown-ec2-instance

    do:

    - <<: *install-postgres-xenial
      params:
        <<: *install-postgres-xenial-params
        USER_NAME: ubuntu

    - <<: *test-bin
      params:
        <<: *test-bin-params
        USER_NAME: ubuntu

- name: ec2-fedora-23
  serial: true
  plan:
  - aggregate:
    - get: bin

    - get: bin-rc
      params:
        globs:
        - concourse_linux_amd64

    - get: cloudformation-template

  - <<: *launch-ec2-instance
    params:
      <<: *launch-ec2-instance-params
      USER_NAME: fedora
      IMAGE_ID: ami-518bfb3b

  - ensure:
      <<: *teardown-ec2-instance

    do:
    - <<: *install-postgres-fedora
      params:
        <<: *install-postgres-fedora-params
        OS: fedora
        USER_NAME: fedora

    - <<: *fedora-dependencies
      params:
        <<: *fedora-dependencies-params
        USER_NAME: fedora

    - <<: *test-bin
      params:
        <<: *test-bin-params
        USER_NAME: fedora
