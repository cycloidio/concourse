// This file was generated by counterfeiter
package tsafakes

import (
	"sync"

	"github.com/concourse/tsa"
)

type FakeTokenGenerator struct {
	GenerateSystemTokenStub        func() (string, error)
	generateSystemTokenMutex       sync.RWMutex
	generateSystemTokenArgsForCall []struct{}
	generateSystemTokenReturns     struct {
		result1 string
		result2 error
	}
	GenerateTeamTokenStub        func(teamName string) (string, error)
	generateTeamTokenMutex       sync.RWMutex
	generateTeamTokenArgsForCall []struct {
		teamName string
	}
	generateTeamTokenReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenGenerator) GenerateSystemToken() (string, error) {
	fake.generateSystemTokenMutex.Lock()
	fake.generateSystemTokenArgsForCall = append(fake.generateSystemTokenArgsForCall, struct{}{})
	fake.recordInvocation("GenerateSystemToken", []interface{}{})
	fake.generateSystemTokenMutex.Unlock()
	if fake.GenerateSystemTokenStub != nil {
		return fake.GenerateSystemTokenStub()
	} else {
		return fake.generateSystemTokenReturns.result1, fake.generateSystemTokenReturns.result2
	}
}

func (fake *FakeTokenGenerator) GenerateSystemTokenCallCount() int {
	fake.generateSystemTokenMutex.RLock()
	defer fake.generateSystemTokenMutex.RUnlock()
	return len(fake.generateSystemTokenArgsForCall)
}

func (fake *FakeTokenGenerator) GenerateSystemTokenReturns(result1 string, result2 error) {
	fake.GenerateSystemTokenStub = nil
	fake.generateSystemTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenGenerator) GenerateTeamToken(teamName string) (string, error) {
	fake.generateTeamTokenMutex.Lock()
	fake.generateTeamTokenArgsForCall = append(fake.generateTeamTokenArgsForCall, struct {
		teamName string
	}{teamName})
	fake.recordInvocation("GenerateTeamToken", []interface{}{teamName})
	fake.generateTeamTokenMutex.Unlock()
	if fake.GenerateTeamTokenStub != nil {
		return fake.GenerateTeamTokenStub(teamName)
	} else {
		return fake.generateTeamTokenReturns.result1, fake.generateTeamTokenReturns.result2
	}
}

func (fake *FakeTokenGenerator) GenerateTeamTokenCallCount() int {
	fake.generateTeamTokenMutex.RLock()
	defer fake.generateTeamTokenMutex.RUnlock()
	return len(fake.generateTeamTokenArgsForCall)
}

func (fake *FakeTokenGenerator) GenerateTeamTokenArgsForCall(i int) string {
	fake.generateTeamTokenMutex.RLock()
	defer fake.generateTeamTokenMutex.RUnlock()
	return fake.generateTeamTokenArgsForCall[i].teamName
}

func (fake *FakeTokenGenerator) GenerateTeamTokenReturns(result1 string, result2 error) {
	fake.GenerateTeamTokenStub = nil
	fake.generateTeamTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateSystemTokenMutex.RLock()
	defer fake.generateSystemTokenMutex.RUnlock()
	fake.generateTeamTokenMutex.RLock()
	defer fake.generateTeamTokenMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTokenGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tsa.TokenGenerator = new(FakeTokenGenerator)
